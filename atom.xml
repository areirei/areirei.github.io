<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>FullStackMan</title>
  
  <subtitle>Design and building a team or a company which builds great products.</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://areirei.github.io/"/>
  <updated>2018-03-23T02:32:22.994Z</updated>
  <id>https://areirei.github.io/</id>
  
  <author>
    <name>FullStackMan</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Laravel-vue-environment</title>
    <link href="https://areirei.github.io/2018/03/20/Laravel-vue-environment/"/>
    <id>https://areirei.github.io/2018/03/20/Laravel-vue-environment/</id>
    <published>2018-03-20T09:09:02.000Z</published>
    <updated>2018-03-23T02:32:22.994Z</updated>
    
    <content type="html"><![CDATA[<p>Laravel包含了一些基本脚手架，以便使用Vue库更容易开始编写现代JavaScript 。Vue为使用组件构建强大的JavaScript应用程序提供了富有表现力的API。我们可以使用Laravel Mix轻松地将JavaScript组件编译成一个可以浏览器的JavaScript文件。</p><h1 id="创建laravel"><a href="#创建laravel" class="headerlink" title="创建laravel"></a>创建laravel</h1><p>首先，你要有一个<a href="https://getcomposer.org/download/" target="_blank" rel="external">composer</a>,然后，你便有了一个<a href="https://laravel.com/docs/5.6" target="_blank" rel="external">laravel</a>。<br>(运行命令<code>composer create-project --prefer-dist laravel/laravel blog</code>创建一个新的laravel项目)。</p><h1 id="Hello-world"><a href="#Hello-world" class="headerlink" title="Hello world!"></a>Hello world!</h1><ol><li>打开命令行，进入你的项目内<code>cd blog</code></li><li><p>在开始前，先下载项目默认依赖，由于各种你懂得原因，npm作为国外的node仓库安装工具，操作的时候可能会发生速度慢等各种问题，一般推荐用taobao源进行加速,下面代码同样加上后缀即可</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install  --registry=https://registry.npm.taobao.org</div></pre></td></tr></table></figure></li><li><p>下载vue路由管理</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install vue-router --save-dev</div></pre></td></tr></table></figure></li></ol><div class="tip">npm install 安装好后不写入package.json中<br><br>npm install –save 安装好后写入package.json的dependencies中（生产环境依赖）<br><br>npm install –save-dev 安装好后写入package.json的devDepencies中（开发环境依赖）</div><ol><li><p>在<code>/resources/assets/js/components</code>中新建一个<code>HelloComponent.vue</code>自定义组件文件。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">&lt;template&gt;</div><div class="line">    &lt;div&gt;</div><div class="line">        &lt;h1&gt;Hello World!&lt;/h1&gt;</div><div class="line">    &lt;/div&gt;</div><div class="line">&lt;/template&gt;</div><div class="line"></div><div class="line">&lt;script&gt;</div><div class="line">    export default&#123;</div><div class="line">        data()&#123;</div><div class="line">            return &#123;</div><div class="line"></div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&lt;/script&gt;</div></pre></td></tr></table></figure></li><li><p>在<code>/resources/assets/js</code>下新建文件夹<code>router</code>,并在里面新建<code>hello.js</code>,并通过嵌套路由配置将<code>hello</code>路由映射到刚刚新创建的<code>HellowComponent</code>组件当中。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">import Vue from &apos;vue&apos;</div><div class="line">import VueRouter from &apos;vue-router&apos;</div><div class="line">Vue.use(VueRouter)</div><div class="line"></div><div class="line">export default new VueRouter(&#123;</div><div class="line">    saveScrollPosition: true,</div><div class="line">    routes: [</div><div class="line">        &#123;</div><div class="line">            name: &quot;hello&quot;,</div><div class="line">            path: &apos;/&apos;,</div><div class="line">            component: resolve =&gt;void(require([&apos;../components/HelloComponent.vue&apos;], resolve))</div><div class="line">        &#125;,</div><div class="line">    ]</div><div class="line">&#125;)</div></pre></td></tr></table></figure></li><li><p>在当前laravel项目中<code>/resources/assets/js</code>下新建<code>hello.vue</code>,做为主界面，嵌套路由视图。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">&lt;template&gt;</div><div class="line">    &lt;div&gt;</div><div class="line">        &lt;h1&gt;Hello&lt;/h1&gt;</div><div class="line">        &lt;router-view&gt;&lt;/router-view&gt;</div><div class="line">    &lt;/div&gt;</div><div class="line">&lt;/template&gt;</div><div class="line"></div><div class="line">&lt;script&gt;</div><div class="line">    export default&#123;</div><div class="line">        data()&#123;</div><div class="line">            return &#123;</div><div class="line"></div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&lt;/script&gt;</div></pre></td></tr></table></figure></li><li><p>接着在<code>/resources/assets/js</code>下新建<code>hello.js</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">require(&apos;./bootstrap&apos;);</div><div class="line"></div><div class="line">window.Vue = require(&apos;vue&apos;);</div><div class="line"></div><div class="line">import Vue from &apos;vue&apos;</div><div class="line">import App from &apos;./hello.vue&apos;</div><div class="line">import router from &apos;./router/hello.js&apos;</div><div class="line">const app = new Vue(&#123;</div><div class="line">    el: &apos;#app&apos;,</div><div class="line">    router,</div><div class="line">    render: h=&gt;h(App)</div><div class="line">&#125;);</div></pre></td></tr></table></figure></li><li><p>在<code>/resources/views</code>下新建<code>hello.blade.php</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">&lt;!DOCTYPE html&gt;</div><div class="line">&lt;html&gt;</div><div class="line">&lt;head&gt;</div><div class="line">    &lt;meta charset=&quot;utf-8&quot;&gt;</div><div class="line">    &lt;meta name=&quot;csrf-token&quot; content=&quot;&#123;&#123; csrf_token() &#125;&#125;&quot;&gt;</div><div class="line">    &lt;title&gt;Hello&lt;/title&gt;</div><div class="line">&lt;/head&gt;</div><div class="line">&lt;body&gt;</div><div class="line">    &lt;div id=&quot;app&quot;&gt;&lt;/div&gt;</div><div class="line">    &lt;script src=&quot;&#123;&#123; mix(&apos;js/manifest.js&apos;) &#125;&#125;&quot;&gt;&lt;/script&gt;</div><div class="line">    &lt;script src=&quot;&#123;&#123; mix(&apos;js/vendor.js&apos;) &#125;&#125;&quot;&gt;&lt;/script&gt;</div><div class="line">    &lt;script src=&quot;&#123;&#123; mix(&apos;js/hello.js&apos;) &#125;&#125;&quot;&gt;&lt;/script&gt;</div><div class="line">&lt;/body&gt;</div><div class="line">&lt;/html&gt;</div></pre></td></tr></table></figure></li><li><p>在<code>/resources/routes/web.php</code>中新增路由</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Route::view(&apos;/hello&apos;,&apos;/hello&apos;);</div></pre></td></tr></table></figure></li></ol><div class="tip">laravel5.5起新增了<code>Route::view</code>和<code>Route::redirect</code>方法，5.4及以下的可以写成这样<code>Route::get(&#39;/hello&#39;, function () {return view(&#39;hello&#39;);});</code></div><ol><li><p>修改<code>webpack.mix.js</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">mix.js(&apos;resources/assets/js/app.js&apos;, &apos;public/js&apos;)</div><div class="line">   .js(&apos;resources/assets/js/hello.js&apos;, &apos;public/js&apos;)</div><div class="line">   .extract([&apos;vue&apos;, &quot;vue-router&quot;, &quot;axios&quot;])</div><div class="line">   .sass(&apos;resources/assets/sass/app.scss&apos;, &apos;public/css&apos;);</div></pre></td></tr></table></figure></li><li><p>保存后在命令行中本项目目录下执行<code>npm run watch</code>,进行重新编译</p></li><li><p>可以在命令行中本项目目录下输入<code>php artisan serve</code>,访问<code>http://127.0.0.1:8000/hello</code>即可看到效果</p></li></ol><h1 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h1><p>有时候运行npm时会提示<code>Write EIO</code>错误，可能是因为编码的问题造成，这种时候可用管理员身份运行命令行文件，或者运行<code>chcp 850</code>设置活动代码页编号，介绍在laravel中部署vue的教程基本结束，如果您有兴趣了解更多关于编写Vue组件的信息,你可以阅读<a href="https://vuejs.org/v2/guide/" target="_blank" rel="external">Vue文档</a>,就酱。<br> (•ㅂ•)/♥  共勉~</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Laravel包含了一些基本脚手架，以便使用Vue库更容易开始编写现代JavaScript 。Vue为使用组件构建强大的JavaScript应用程序提供了富有表现力的API。我们可以使用Laravel Mix轻松地将JavaScript组件编译成一个可以浏览器的JavaSc
      
    
    </summary>
    
    
      <category term="laravel,vue,environment,construction" scheme="https://areirei.github.io/tags/laravel-vue-environment-construction/"/>
    
  </entry>
  
  <entry>
    <title>laravel-中间件过虑权限</title>
    <link href="https://areirei.github.io/2018/01/02/Laravel-role-middleware/"/>
    <id>https://areirei.github.io/2018/01/02/Laravel-role-middleware/</id>
    <published>2018-01-02T09:36:44.000Z</published>
    <updated>2018-01-06T03:34:35.308Z</updated>
    
    <content type="html"><![CDATA[<p>laravel有很多非常棒的权限管理包，平时都是用权限包的方法过虑权限，但在项目中，我发现用中间件的方法来过虑权限也很不错，也能解藕，今天用的是基于角色的权限管理<a href="https://github.com/Zizaco/entrust" target="_blank" rel="external">Entrust</a>,关于相关的使用就不过多阐述了，其它还有类似<a href="https://github.com/spatie/laravel-permission" target="_blank" rel="external">Laravel-permission</a>,<a href="https://github.com/JosephSilber/bouncer" target="_blank" rel="external">bouncer</a>等等都非常不错！<a id="more"></a></p><h2 id="laravel-权限过虑"><a href="#laravel-权限过虑" class="headerlink" title="laravel 权限过虑"></a>laravel 权限过虑</h2><p>其实官方已经有现成的方式进行权限过虑，现在只是提供另一个方式实现权限过虑，laravel的请求在进入逻辑处理之前会通过http中间件进行处理，而我们在原有的基础上，新增一个中间件handle住这个事件</p><ol><li>新建中间件<br><img src="https://raw.githubusercontent.com/areirei/fileStore/master/pic/power_path.png" alt="middleware_path"></li><li>修改内容<br><img src="https://raw.githubusercontent.com/areirei/fileStore/master/pic/power_file.png" alt="middleware_code"></li><li><p>同时在<code>App\Http\Kernel.php</code>中加入门面</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&apos;power&apos; =&gt; \App\Http\Middleware\Power::class,</div></pre></td></tr></table></figure></li><li><p>在路由中过虑<br>其中<code>uses</code>是注册路由时的参数，自动生成映射到控制器方法的uri,我们添加一个<code>permission</code>参数（参数名任意，中间件那里修改即可），用于路由过虑</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">Route::group([&apos;middleware&apos; =&gt; [&apos;auth&apos;,&apos;power&apos;]], function () &#123;</div><div class="line">    Route::get(&apos;/user/list&apos;,[&apos;uses&apos;=&gt;&apos;UserController@userLists&apos;,&apos;permission&apos;=&gt;&apos;user-list&apos;]);</div><div class="line">    //something...</div><div class="line">&#125;);</div></pre></td></tr></table></figure></li></ol><div class="tip"><br>原本的权限管理就有很多非常好的方法供调用，此文只是提供另一个思路做权限管理，希望能抛砖引玉，共勉<br></div>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;laravel有很多非常棒的权限管理包，平时都是用权限包的方法过虑权限，但在项目中，我发现用中间件的方法来过虑权限也很不错，也能解藕，今天用的是基于角色的权限管理&lt;a href=&quot;https://github.com/Zizaco/entrust&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Entrust&lt;/a&gt;,关于相关的使用就不过多阐述了，其它还有类似&lt;a href=&quot;https://github.com/spatie/laravel-permission&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Laravel-permission&lt;/a&gt;,&lt;a href=&quot;https://github.com/JosephSilber/bouncer&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;bouncer&lt;/a&gt;等等都非常不错！
    
    </summary>
    
    
      <category term="laravel,role,middleware" scheme="https://areirei.github.io/tags/laravel-role-middleware/"/>
    
  </entry>
  
  <entry>
    <title>laravel大型架构的MVC分层</title>
    <link href="https://areirei.github.io/2017/12/24/Laravel-mvc-pattern/"/>
    <id>https://areirei.github.io/2017/12/24/Laravel-mvc-pattern/</id>
    <published>2017-12-24T02:37:30.000Z</published>
    <updated>2018-01-06T03:34:29.977Z</updated>
    
    <content type="html"><![CDATA[<p>小型架构的MVC分层</p><ul><li>Model 数据层</li><li>View 视图层</li><li>Controller 控制层<a id="more"></a></li></ul><p>原本将这些逻辑处理都放在了Model层，随着项目的不断发展，数据逻辑和业务逻辑越发复杂，有时会将第三方信息发送获取，Redis数据存储，不同model的调度都写在了同一个Model上，导致model在原本数据访问的基础上，承担了更多的责任，编写维护都不再优雅高效。</p><h2 id="大型架构的MVC分层"><a href="#大型架构的MVC分层" class="headerlink" title="大型架构的MVC分层"></a>大型架构的MVC分层</h2><p><img src="https://raw.githubusercontent.com/areirei/fileStore/master/pic/mvc_big.png" alt="MVC分层"></p><ol><li>Model      : 数据映射层</li><li>Repository : 将Model获取的数据封装成对像的集合并提供操作</li><li>Service    : 封装业务逻辑</li><li>Controller ：接收请求并调用Service</li><li>View       : HTML页面</li></ol><p>Service调用Repository来获取数据，相互协调</p><ol><li>通过Repository将数据操作和数据访问从Model中分离</li><li>通过Services处理复杂的业务逻辑</li><li>Controller可调度不同的Service</li></ol><p><img src="https://raw.githubusercontent.com/areirei/fileStore/master/pic/file_interface.png" alt="MVC分层"></p><h3 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h3><p>当你开始接受这种设定，会感觉到laravel式的优雅编程和其它优点</p><ol><li>数据访问逻辑集中处理（易于维护）</li><li>业务和数据逻辑的完全分离（易于调试）</li><li>减少重复代码</li><li>降低程序出错的机率</li><li>将来切近到其它的ORM也很容易（解耦对数据源的依赖）</li></ol><h3 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h3><p><a href="http://oomusou.io/laravel/laravel-architecture/" target="_blank" rel="external">Laravel 的中大型專案架構</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;小型架构的MVC分层&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Model 数据层&lt;/li&gt;
&lt;li&gt;View 视图层&lt;/li&gt;
&lt;li&gt;Controller 控制层
    
    </summary>
    
    
      <category term="laravel,mvc" scheme="https://areirei.github.io/tags/laravel-mvc/"/>
    
  </entry>
  
  <entry>
    <title>Laravel 小型架构的Model分层</title>
    <link href="https://areirei.github.io/2017/12/14/Laravel-eloquent-query-scope/"/>
    <id>https://areirei.github.io/2017/12/14/Laravel-eloquent-query-scope/</id>
    <published>2017-12-14T05:58:45.000Z</published>
    <updated>2018-01-06T03:34:24.454Z</updated>
    
    <content type="html"><![CDATA[<p>在刚开始使用laravel的过程中，我们需要将代码分层</p><ul><li>Model 数据层</li><li>View 视图层</li><li>Controller 控制层<a id="more"></a>在这个基础上我们在用控制层获取数据的时候，就可以用上Laravel的Eloquent中的本地作用域，将数据处理和业务逻辑都集中在Model层，让控制层只做调度的功能;</li></ul><h2 id="Eloquent-Query-Scopes"><a href="#Eloquent-Query-Scopes" class="headerlink" title="Eloquent Query Scopes"></a>Eloquent Query Scopes</h2><p>首先在模型文件中新增一个方法<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">&lt;?php</div><div class="line"></div><div class="line">namespace App;</div><div class="line"></div><div class="line">use Illuminate\Database\Eloquent\Model;</div><div class="line"></div><div class="line">class User extends Model</div><div class="line">&#123;</div><div class="line">    /**</div><div class="line">     * Scope a query to only include popular users.</div><div class="line">     *</div><div class="line">     * @param \Illuminate\Database\Eloquent\Builder $query</div><div class="line">     * @return \Illuminate\Database\Eloquent\Builder</div><div class="line">     */</div><div class="line">    public function scopePopular($query)</div><div class="line">    &#123;</div><div class="line">        return $query-&gt;where(&apos;votes&apos;, &apos;&gt;&apos;, 100);</div><div class="line">    &#125;</div></pre></td></tr></table></figure></p><div class="tip"><br>    创建方法时名称前面一写要有<strong>scope</strong>，使用方法的时候就不用加上prefix了。<br></div><br>然后在控制器文件中这样使用<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$users = App\User::popular()-&gt;active()-&gt;orderBy(&apos;created_at&apos;)-&gt;get();</div></pre></td></tr></table></figure><br><br>这样，在获取数据的时候你就可以同时进行其它处理<br>当然，你也可以这样使用<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">public function scopePopular($query,$data)</div><div class="line">   &#123;</div><div class="line">       if(isset($data[&apos;id&apos;])&#123;</div><div class="line">           return $query-&gt;where(&apos;id&apos;,$data[&apos;id&apos;])-&gt;update($data);</div><div class="line">       &#125;else&#123;</div><div class="line">           return $query-&gt;create($data);</div><div class="line">       &#125;</div><div class="line">   &#125;</div></pre></td></tr></table></figure><br><br>通过传进来的第二个参数，进行其它业务或数据的处理，controller又可以重复使用方法，控制层也能只做基本控制。<br><div class="tip"><br>    创建方法时的第一个参数必须是builder，其它参数则紧接其后添加即可。<br></div><p>More info: <a href="https://laravel.com/docs/5.5/eloquent#query-scopes" target="_blank" rel="external">query-scopes</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在刚开始使用laravel的过程中，我们需要将代码分层&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Model 数据层&lt;/li&gt;
&lt;li&gt;View 视图层&lt;/li&gt;
&lt;li&gt;Controller 控制层
    
    </summary>
    
    
      <category term="laravel,Eloquent" scheme="https://areirei.github.io/tags/laravel-Eloquent/"/>
    
  </entry>
  
  <entry>
    <title>Laravel-定制500错误页</title>
    <link href="https://areirei.github.io/2017/09/11/Laravel-custom-error-pages/"/>
    <id>https://areirei.github.io/2017/09/11/Laravel-custom-error-pages/</id>
    <published>2017-09-11T13:54:50.000Z</published>
    <updated>2018-01-06T03:34:26.314Z</updated>
    
    <content type="html"><![CDATA[<p>laravel中想要定义一个错误页面和调用错误页面很简单,在<code>resources/views/errors</code>文件夹中写入<code>404.blade.php</code>(请求错误代码+‘blade.php’)文件即可,因为在Laravel 5 中，所有异常处理都集中处理了，这是HTTP 异常的默认行为。<a id="more"></a></p><h2 id="500错误"><a href="#500错误" class="headerlink" title="500错误"></a>500错误</h2><p>唯独500错误，或者说其它不属于于正常请求错误代码类型的错误（例如代码错误）使用<code>resources/views/errors/500.blade.php</code>无效，在使用<code>$e-&gt;getStatusCode()</code>后依旧无法正常获取HTTP异常的解决办法就是在默认的异常处理中<code>app/Exceptions/Handler.php</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"> * 默认的异常处理方法</div><div class="line"> *</div><div class="line"> * @param  \Illuminate\Http\Request  $request</div><div class="line"> * @param  \Exception  $e</div><div class="line"> * @return \Illuminate\Http\Response</div><div class="line"> */</div><div class="line">public function render($request, Exception $e)</div><div class="line">&#123;</div><div class="line">    if (!$this-&gt;isHttpException($e)) $e = new \Symfony\Component\HttpKernel\Exception\HttpException(500);</div><div class="line">    return parent::render($request, $e);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p><div class="tip"><br>    ps:记得debug模式改成false<br></div><br>希望这个方法对你也有用，就酱 (๑•̀ㅂ•́)و✧</p><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><p><a href="https://laravel.com/docs/5.4/errors#render-method" target="_blank" rel="external">Laravel Errors &amp; Logging</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;laravel中想要定义一个错误页面和调用错误页面很简单,在&lt;code&gt;resources/views/errors&lt;/code&gt;文件夹中写入&lt;code&gt;404.blade.php&lt;/code&gt;(请求错误代码+‘blade.php’)文件即可,因为在Laravel 5 中，所有异常处理都集中处理了，这是HTTP 异常的默认行为。
    
    </summary>
    
    
      <category term="laravel,errors" scheme="https://areirei.github.io/tags/laravel-errors/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="https://areirei.github.io/2017/09/10/hello-world/"/>
    <id>https://areirei.github.io/2017/09/10/hello-world/</id>
    <published>2017-09-10T13:54:50.000Z</published>
    <updated>2018-01-02T09:32:35.586Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="external">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="external">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="external">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="external">GitHub</a>.</p><a id="more"></a><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo new <span class="string">"My New Post"</span></div></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="external">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo server</div></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="external">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo generate</div></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="external">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo deploy</div></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="external">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;documentation&lt;/a&gt; for more info. If you get any problems when using Hexo, you can find the answer in &lt;a href=&quot;https://hexo.io/docs/troubleshooting.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;troubleshooting&lt;/a&gt; or you can ask me on &lt;a href=&quot;https://github.com/hexojs/hexo/issues&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;GitHub&lt;/a&gt;.&lt;/p&gt;
    
    </summary>
    
    
      <category term="hexo" scheme="https://areirei.github.io/tags/hexo/"/>
    
  </entry>
  
</feed>
