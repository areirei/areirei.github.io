<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>FullStackMan</title>
  
  <subtitle>Design and building a team or a company which builds great products.</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://areirei.github.io/"/>
  <updated>2018-05-05T08:24:51.319Z</updated>
  <id>https://areirei.github.io/</id>
  
  <author>
    <name>FullStackMan</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Certbot部署配置HTTPS及nginx报错解决</title>
    <link href="https://areirei.github.io/2018/05/05/Certbot-https-nginx-error/"/>
    <id>https://areirei.github.io/2018/05/05/Certbot-https-nginx-error/</id>
    <published>2018-05-05T07:15:14.000Z</published>
    <updated>2018-05-05T08:24:51.319Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://cdn.linuxstory.org/wp-content/uploads/2016/11/lets-encrypt.png" alt="Let&#39;s Encrypt"></p><p><strong>EEF 电子前哨基金会</strong>、 <strong>Mozilla 基金会</strong>和<strong>美国密歇根大学</strong>成立了一个公益组织叫 ISRG （ Internet Security Research Group ），这个组织从 2015 年开始推出了 <a href="https://letsencrypt.org/" target="_blank" rel="external">Let’s Encrypt</a> 免费证书,后来又有<strong>思科</strong>、 <strong>Akamai</strong> 加入，甚至连 <strong>Linux 基金会</strong>也加入了合作，这些大牌组织的加入保证了这个项目的可信度和可持续性。<a id="more"></a><br>而ISRG 的发起者 EFF （电子前哨基金会）为 Let’s Encrypt 项目发布了一个官方的客户端 Certbot ，利用它可以完全自动化的获取、部署和更新安全证书。</p><p><img src="https://certbot.eff.org/images/certbot-logo-1A.svg" alt="certbot"></p><h2 id="Install"><a href="#Install" class="headerlink" title="Install"></a>Install</h2><p>先是按照<a href="https://certbot.eff.org" target="_blank" rel="external">官方文档</a>选择相应的系统和服务器,假如运行环境为<strong>CentOS 7</strong>,Web服务器是<strong>Nginx</strong>,安装代码如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">$ yum -y install yum-utils</div><div class="line">$ yum-config-manager --enable rhui-REGION-rhel-server-extras rhui-REGION-rhel-server-optional</div></pre></td></tr></table></figure><p>接着下载Certbot</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ sudo yum install certbot-nginx</div></pre></td></tr></table></figure><h2 id="Get-Started"><a href="#Get-Started" class="headerlink" title="Get Started"></a>Get Started</h2><p>安装写成后尝试申请和部署ssl证书</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ sudo certbot --nginx</div></pre></td></tr></table></figure><p>运行报错，信息如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">//log 文件记录错误</div><div class="line">Traceback (most recent call last):</div><div class="line">File &quot;/root/.local/share/letsencrypt/lib/python2.6/site-packages/certbot/plugins/disco.py&quot;, line 130, in prepare</div><div class="line">self._initialized.prepare()</div><div class="line">File &quot;/root/.local/share/letsencrypt/lib/python2.6/site-packages/certbot_nginx/configurator.py&quot;, line 155, in prepare</div><div class="line">raise errors.NoInstallationError</div><div class="line">NoInstallationError</div><div class="line">2017-07-15 14:25:35,535:DEBUG:certbot.plugins.selection:No candidate plugin</div><div class="line">2017-07-15 14:25:35,535:DEBUG:certbot.plugins.selection:Selected authenticator None and installer None</div></pre></td></tr></table></figure><p>发现是<strong>默认nginx配置路径</strong>和自己搭建的nginx目录不匹配，按照网友推荐的方式我也创建了快捷链接到目录中来解决问题，代码如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">ln -s /usr/local/nginx/sbin/nginx /usr/bin/nginx</div><div class="line">ln -s /usr/local/nginx/conf/ /etc/nginx</div></pre></td></tr></table></figure><p>接着运行<code>sudo certbot --nginx</code>,再次错误，具体报错信息如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">UnicodeDecodeError: &apos;ascii&apos; codec can&apos;t decode byte 0xe2 in position 330: ordinal not in range(128)</div><div class="line">2017-11-12 15:15:18,560:ERROR:certbot.log:An unexpected error occurred:</div></pre></td></tr></table></figure><p>发现是字符编码解码的问题，一种解决方法为设置以utf-8编码运行代码，第二种就将nginx配置文件中的中文或其它非ascii编码替换成ascii编码（或者删除），我使用了第二种，将配置文件多余的中文去除，接着继续运行<code>sudo certbot --nginx</code>,选择好自己的域名，选择yse即可</p><h2 id="Automating-renewal"><a href="#Automating-renewal" class="headerlink" title="Automating renewal"></a>Automating renewal</h2><p>测试能否更新证书</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo certbot renew --dry-run</div></pre></td></tr></table></figure><p>如成功则添加定时任务<code>crontab -e</code>，内容如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">0 0,12 * * * python -c &apos;import random; import time; time.sleep(random.random() * 3600)&apos; &amp;&amp; certbot renew</div></pre></td></tr></table></figure><h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>从http更新到https很简单(自动化)，其它的做法也有去阿里云或七牛云配置https，根据不同需求选择自己的做法，以上在安装过程中发生的一个certbot中的nginx默认路径和配置文件编码问题供参考，具体代码配置跟着官方文档即可，希望你也能早日配置更安全的https网站,就酱。<br> (•ㅂ•)/♥  共勉~</p><h4 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h4><p><a href="https://certbot.eff.org" target="_blank" rel="external">Certbot-官方网站</a><br><a href="https://github.com/certbot/certbot/issues/4937" target="_blank" rel="external">Certbot-nginx-NoInstallationError-Github问题</a><br><a href="https://github.com/certbot/certbot/issues/5236" target="_blank" rel="external">Certbot-UnicodeDecodeError-Github问题</a><br><a href="https://linuxstory.org/deploy-lets-encrypt-ssl-certificate-with-certbot/" target="_blank" rel="external">HTTPS 简介及使用官方工具 Certbot 配置</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://cdn.linuxstory.org/wp-content/uploads/2016/11/lets-encrypt.png&quot; alt=&quot;Let&amp;#39;s Encrypt&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;EEF 电子前哨基金会&lt;/strong&gt;、 &lt;strong&gt;Mozilla 基金会&lt;/strong&gt;和&lt;strong&gt;美国密歇根大学&lt;/strong&gt;成立了一个公益组织叫 ISRG （ Internet Security Research Group ），这个组织从 2015 年开始推出了 &lt;a href=&quot;https://letsencrypt.org/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Let’s Encrypt&lt;/a&gt; 免费证书,后来又有&lt;strong&gt;思科&lt;/strong&gt;、 &lt;strong&gt;Akamai&lt;/strong&gt; 加入，甚至连 &lt;strong&gt;Linux 基金会&lt;/strong&gt;也加入了合作，这些大牌组织的加入保证了这个项目的可信度和可持续性。
    
    </summary>
    
    
      <category term="https" scheme="https://areirei.github.io/tags/https/"/>
    
      <category term="nginx" scheme="https://areirei.github.io/tags/nginx/"/>
    
      <category term="linux" scheme="https://areirei.github.io/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>2018春招PHP面试总结</title>
    <link href="https://areirei.github.io/2018/04/20/PHP-Interview/"/>
    <id>https://areirei.github.io/2018/04/20/PHP-Interview/</id>
    <published>2018-04-20T07:44:06.000Z</published>
    <updated>2018-04-22T02:45:41.112Z</updated>
    
    <content type="html"><![CDATA[<p>这次的面试，不仅仅希望能开启一个新的征程，了解世界，也是一个发现自身不足的一个过程，借由此确定将来的发展（学习）方向的一次机会。<a id="more"></a></p><h2 id="面试准备"><a href="#面试准备" class="headerlink" title="面试准备"></a>面试准备</h2><p><a href="https://www.zhihu.com/question/21187514/answer/147065558" target="_blank" rel="external">一份能让面试官了解你的简历</a>，一份对于自己的自信，就出发吧<br><img src="https://raw.githubusercontent.com/areirei/fileStore/master/pic/php-interview-map.png" alt="Mind-map"></p><h2 id="PHP"><a href="#PHP" class="headerlink" title="PHP"></a>PHP</h2><p>php是世界上最好的语言！</p><h4 id="基础"><a href="#基础" class="headerlink" title="基础"></a>基础</h4><ol><li><p><a href="https://www.zhihu.com/question/19786827" target="_blank" rel="external">session和cookie的区别</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">Session是在服务端保存的一个数据结构，用来跟踪用户的状态，这个数据可以保存在集群、数据库、文件中</div><div class="line"></div><div class="line">Cookie是客户端保存用户信息的一种机制，用来记录用户的一些信息，也是实现Session的一种方式。</div></pre></td></tr></table></figure></li><li><p><a href="https://blog.csdn.net/u011957758/article/details/73320083" target="_blank" rel="external">PHP7</a>用了吗，了解哪些新特性</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">PHP7在性能方面实现跨越式的提升，新的操作符，统一变量语法等等</div><div class="line"></div><div class="line">参考[PHP7的文章](https://blog.csdn.net/u011957758/article/details/73320083)</div></pre></td></tr></table></figure></li><li><p><a href="http://php.net/manual/zh/language.constants.predefined.php" target="_blank" rel="external">魔术变量</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">问了__dir__代表的含意,这个是回答文件所在的目录</div><div class="line"></div><div class="line">参考[PHP 手册之魔术常量](http://php.net/manual/zh/language.constants.predefined.php)</div></pre></td></tr></table></figure></li><li><p><a href="http://www.php.net/manual/zh/language.oop5.magic.php" target="_blank" rel="external">魔术方法</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">这算是经常会问到的一个题目了，常用的都记得，忽然问到__invoke()就懵了</div><div class="line">__construct()， __destruct()， __call()， __callStatic()， __get()， __set()， __isset()， __unset()， __sleep()， __wakeup()， __toString()， __invoke()， __set_state()， __clone() 和 __debugInfo() </div><div class="line"></div><div class="line">参考[PHP 手册之魔术方法](http://www.php.net/manual/zh/language.oop5.magic.php)</div></pre></td></tr></table></figure></li></ol><h4 id="数据结构和算法"><a href="#数据结构和算法" class="headerlink" title="数据结构和算法"></a>数据结构和算法</h4><ol><li><p><a href="http://www.jb51.net/article/130272.htm" target="_blank" rel="external">栈数据结构</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">只要能用代码实现出栈数据结构即可</div><div class="line"></div><div class="line">参考[栈数据结构文章](http://www.jb51.net/article/130272.htm)</div></pre></td></tr></table></figure></li><li><p><a href="http://www.jb51.net/article/24497.htm" target="_blank" rel="external">冒泡排序</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">只要能用代码实现出冒泡排序即可</div><div class="line"></div><div class="line">参考[冒泡排序文章](http://www.jb51.net/article/24497.htm)</div></pre></td></tr></table></figure></li><li><p><a href="https://blog.csdn.net/HaoDaWang/article/details/78065162" target="_blank" rel="external">完全二叉树和满二叉树的区别</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">只有最下面的两层结点度能够小于2，并且最下面一层的结点都集中在该层最左边的若干位置的二叉树才为完全二叉树</div><div class="line">而一棵深度为h且有 2^h-1个结点的二叉树即为满二叉树</div><div class="line"></div><div class="line">参考[完美二叉树, 完全二叉树和完满二叉树](https://blog.csdn.net/HaoDaWang/article/details/78065162)</div></pre></td></tr></table></figure></li></ol><h4 id="架构相关"><a href="#架构相关" class="headerlink" title="架构相关"></a>架构相关</h4><ol><li><p><a href="https://blog.csdn.net/qq1690194137/article/details/79794944" target="_blank" rel="external">Laravel和ThinkPHP有什么区别，对于laravel有什么要吐槽的</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">我从路由，中间件到控制器，数据访问,视图等层面上介绍了不同</div><div class="line">吐槽的话可能相对于一些项目，laravel有点‘重’</div><div class="line"></div><div class="line">参考[tp3.2和tp5,以及laravel的区别](https://blog.csdn.net/qq1690194137/article/details/79794944)</div></pre></td></tr></table></figure></li><li><p><a href="基于 Composer 的 PHP 模块化开发">有用composer发布过自己的包吗</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">我回答没有，只是了解过</div><div class="line">面试官就说他们的框架是自己在Discuz的基础上二次开发的框架，在他优秀的基础上把composer依赖管理也都引进blabla</div><div class="line"></div><div class="line">参考[基于 Composer 的 PHP 模块化开发](https://zhuanlan.zhihu.com/p/27943241)</div></pre></td></tr></table></figure></li><li><p><a href="https://baike.sogou.com/v25227.htm" target="_blank" rel="external">谈谈对于MVC的理解</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">结合项目说明模板，视图，控制器之间的关系和基本的构成</div><div class="line"></div><div class="line">参考[MVC](https://baike.sogou.com/v25227.htm)</div></pre></td></tr></table></figure></li></ol><h4 id="防护"><a href="#防护" class="headerlink" title="防护"></a>防护</h4><ol><li>XSS 跨站脚本攻击</li><li>DDOS 流量攻击</li><li>CSRF 跨站请求伪造攻击</li><li>SQL注入<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">在前端表单用户输入进行控制或限制</div><div class="line">有后端传参数和数据时进行过滤等等</div><div class="line"></div><div class="line">参考[常见的 CSRF、XSS、sql注入、DDOS流量攻击](https://blog.csdn.net/echo_laodong/article/details/79254552)</div></pre></td></tr></table></figure></li></ol><h4 id="项目"><a href="#项目" class="headerlink" title="项目"></a>项目</h4><ol><li><p>在项目中如何解决并发的问题</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">我的解决办法先是前端控制有效请求，例如一分钟才正常请求一次</div><div class="line">接着后端同样过虑无效请求，接着接操作放进队列中实现</div><div class="line"></div><div class="line">有个面试官问，你这个队列是阻塞的吗，如果真的同时两个用户购买，两个用户等待完成，他们还是用同一个线程完成，有没有考虑用其它方式实现</div><div class="line">我说无，他就说可以用锁的机制，第二个等待第一个完成，一个接一个</div><div class="line"></div><div class="line">参考[php高并发解决的一点思路](https://blog.csdn.net/mkbug/article/details/71455725)</div><div class="line">相关的还有swoole扩展,可以了解下</div></pre></td></tr></table></figure></li><li><p>微信支付具体实现流程</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">1. H5页面发起支付请求，请求生成支付订单</div><div class="line">2. 调用统一下单API，生成预付单</div><div class="line">3. 生成JSAPI页面调用的支付参数并签名</div><div class="line">4. 微信浏览器自动调起支付JSAPI接口支付</div><div class="line">5. 确认支付</div><div class="line">6. 异步通知商户支付结果，商户收到通知返回确认信息</div><div class="line">7. 返回支付结果,展示支付信息给用户</div><div class="line"></div><div class="line">参考[微信支付时序图](https://pay.weixin.qq.com/wiki/doc/api/jsapi.php?chapter=7_4)</div></pre></td></tr></table></figure></li><li><p>简单实现登录注册功能</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">各个框架考虑的方面不一样，这就按自己的理解写出相应的代码就好</div></pre></td></tr></table></figure></li><li><p>如何设计一个商城</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">我是先给自己限定了一个B2C的商城，然后从数据表开始，接着简单介绍前端和后端实现逻辑</div><div class="line"></div><div class="line">参考[PHP网上商城网站的设计与实现](http://www.docin.com/p-190062065.html)</div></pre></td></tr></table></figure></li></ol><h2 id="MYSQL"><a href="#MYSQL" class="headerlink" title="MYSQL"></a>MYSQL</h2><p>mysql优化基本是重中之重了，尤其考验技术</p><h4 id="基础-1"><a href="#基础-1" class="headerlink" title="基础"></a>基础</h4><ol><li><p><a href="https://blog.csdn.net/xifeijian/article/details/20316775" target="_blank" rel="external">InnoDB和MyISAM有什么区别</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">InnoDB提供事务处理，行级锁，支持外键，支持多种行格式</div><div class="line">MyISAM只支持表级锁，全文索引，堆表</div><div class="line"></div><div class="line">参考[MyISAM与InnoDB区别](https://blog.csdn.net/xifeijian/article/details/20316775)</div></pre></td></tr></table></figure></li><li><p>事务有哪几个特性</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">原子性、一致性、隔离性、持久性</div></pre></td></tr></table></figure></li><li><p>事务的隔离级别</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">未提交读、已提交读、可重复读、可串行化</div><div class="line"></div><div class="line">参考[Innodb中的事务隔离级别和锁的关系](https://tech.meituan.com/innodb-lock.html)</div></pre></td></tr></table></figure></li><li><p>有个表字段的O_Id，OrderDate，OrderPrice，Customer这几个，我们希望查找订单总金额少于 2000 的客户</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">SELECT Customer,SUM(OrderPrice) FROM Orders</div><div class="line">GROUP BY Customer</div><div class="line">HAVING SUM(OrderPrice)&lt;2000</div></pre></td></tr></table></figure></li><li><p>查询学生表的数据，大于六十的为及格，反之不及格</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">select 分数,类别=Case</div><div class="line">WHEN 分数&gt;=60 THEN &apos;及格&apos;</div><div class="line">ELSE &apos;不及格&apos;</div><div class="line">END</div><div class="line">from 成绩表</div></pre></td></tr></table></figure></li><li><p>查询没有学完所有课程的学生学号、姓名</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">SELECT a.SNO ,a.SNAME  </div><div class="line">FROM student a  </div><div class="line">WHERE a.`SNO` NOT IN  </div><div class="line">    ( SELECT b.`SNO` FROM SC b  </div><div class="line">    GROUP BY b.`SNO` HAVING COUNT(*) =  </div><div class="line">        ( SELECT COUNT(*)  FROM course)</div><div class="line">    );</div></pre></td></tr></table></figure></li></ol><h4 id="优化"><a href="#优化" class="headerlink" title="优化"></a>优化</h4><ol><li><p>“select <em> from student where name=’red’”,”select </em> from student where name=’blue’”，优化语句</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">select name from student where name=&apos;red&apos;</div><div class="line">union</div><div class="line">select name from student where name=&apos;blue&apos;</div><div class="line"></div><div class="line">如果用or条件, myisam表能用到索引， innodb不行。 </div><div class="line">innodb用UNION替换OR (适用于索引列)</div></pre></td></tr></table></figure></li><li><p>你一般都会怎么优化数据库</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">查询缓存、EXPLAIN、(联合)索引、使用固定长度静态表</div><div class="line"></div><div class="line">这问题都能写一本书了,参考[MySQL性能优化的最佳21条经验](https://blog.csdn.net/kaka1121/article/details/53395587)</div></pre></td></tr></table></figure></li></ol><h2 id="服务器"><a href="#服务器" class="headerlink" title="服务器"></a>服务器</h2><h4 id="防护-1"><a href="#防护-1" class="headerlink" title="防护"></a>防护</h4><p>服务器怎么做防护<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">仅开放有限端口，限制登录IP，限制登录帐号</div><div class="line"></div><div class="line">也是可以定一本书的问题，可以根据项目回答，参考[服务器防护知识点汇总](https://blog.csdn.net/Sasoritattoo/article/details/9324149)</div></pre></td></tr></table></figure></p><h4 id="协议"><a href="#协议" class="headerlink" title="协议"></a>协议</h4><p>Get和Post有什么区别<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">Get的参数包含在URL，GET请求会被浏览器主动cache，是url编码，有字符限制参数为ASCII字符</div><div class="line">Post 通过request body传递参数,且有多种编码方式</div></pre></td></tr></table></figure></p><h4 id="NginX"><a href="#NginX" class="headerlink" title="NginX"></a>NginX</h4><p>设置nginx时php脚本请求是让什么处理<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">默认配置的是转发到FastCGI处理</div></pre></td></tr></table></figure></p><h4 id="Redis"><a href="#Redis" class="headerlink" title="Redis"></a>Redis</h4><ol><li><p>你用redis来缓存什么数据</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">跟据项目来说自己缓存的一些经常要用到的数据</div></pre></td></tr></table></figure></li><li><p>Redis怎么做持久化，配置哪种刷新频率</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">配置aof持久化，用默认的每秒刷新aof文件</div><div class="line"></div><div class="line">参考[redis 的两种持久化方式及原理](https://blog.csdn.net/yinxiangbing/article/details/48627997)</div></pre></td></tr></table></figure></li><li><p>Redis是多线程吗</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">单线程（我竟然回答是多线程，233）</div><div class="line"></div><div class="line">参考[Redis单进程](http://www.cnblogs.com/syyong/p/6231326.html)</div></pre></td></tr></table></figure></li><li><p>Redis怎么配置一主多从，要多久</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">可以用Redis官方集群方案，具体没有实践过，可能要花几周时间来完成</div><div class="line"></div><div class="line">参考[Redis集群方案](https://www.zhihu.com/question/21419897)</div></pre></td></tr></table></figure></li></ol><h4 id="代码管理"><a href="#代码管理" class="headerlink" title="代码管理"></a>代码管理</h4><p>有用过git吗？当两个人提交了错误代码后，怎么解决<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">用过git提交代码，发生这种情况可以先将远程的代码git pull到本地，然后将冲突的代码或Git标记内容修改正确，然后重新提交代码</div><div class="line"></div><div class="line">参考[git使用经验](https://zhuanlan.zhihu.com/p/22666153)</div></pre></td></tr></table></figure></p><h2 id="其它"><a href="#其它" class="headerlink" title="其它"></a>其它</h2><h4 id="为什么离职"><a href="#为什么离职" class="headerlink" title="为什么离职"></a>为什么离职</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">机智回答,稍微提了一下公司或自身的事&lt;del&gt;钱少事多家远&lt;/del&gt;</div></pre></td></tr></table></figure><h4 id="你理想的团队"><a href="#你理想的团队" class="headerlink" title="你理想的团队"></a>你理想的团队</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">对技术热情，积极解决问题，共同合作</div><div class="line"></div><div class="line">参考[某种理想的团队](https://zhuanlan.zhihu.com/p/19968752)</div></pre></td></tr></table></figure><h4 id="职业规划"><a href="#职业规划" class="headerlink" title="职业规划"></a>职业规划</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">前端深入，后端深入，数据优化分析采集，服务器渗透blabla</div></pre></td></tr></table></figure><h4 id="想问的问题"><a href="#想问的问题" class="headerlink" title="想问的问题"></a>想问的问题</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">一般都会问公司有什么项目，技术架构，有无盈利等</div></pre></td></tr></table></figure><div class="tip">不同公司技术栈不同，关心的点也不同，有点就会在队列的问题上问具体阻塞时的解决方案，有的更多关注项目效率，有的还会关注服务器搭建，有无自己搭建框架和对于流行框架的了解，过程中也许就能找到自己想要的发展方向</div><h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>5天9家7offer，感觉还行，面试时大多公司都会根据简历上的项目进行详细的提问，.<br>面试时能看出技术上的广度（经历项目或技能多少），和技术的深度（数据优化，框架理解制作，服务器攻防渗透），希望大家也能够随着项目的发展，不断实践学习技术,就酱。<br>    \(•ㅂ•)/♥  共勉~</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;这次的面试，不仅仅希望能开启一个新的征程，了解世界，也是一个发现自身不足的一个过程，借由此确定将来的发展（学习）方向的一次机会。
    
    </summary>
    
    
      <category term="PHP,Interview" scheme="https://areirei.github.io/tags/PHP-Interview/"/>
    
  </entry>
  
  <entry>
    <title>Laravel-测试入门</title>
    <link href="https://areirei.github.io/2018/04/09/testing-phpunit/"/>
    <id>https://areirei.github.io/2018/04/09/testing-phpunit/</id>
    <published>2018-04-09T02:13:54.000Z</published>
    <updated>2018-05-05T07:21:14.720Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://laravel.com/docs/5.6/testing" target="_blank" rel="external">Laravel</a>建立在考虑测试的基础上，其中工程化的一大特点就是<strong>可测试性</strong>。事实上，支持使用<a href="http://phpunit.readthedocs.io/zh_CN/latest/index.html" target="_blank" rel="external">PHPUnit</a>进行测试的功能已经包含在内，并且已经为您的应用程序设置了一个文件。该框架还附带了方便的帮助程序方法，使您能够表达测试您的应用程序。<a id="more"></a><br>默认情况下，您的应用程序的<code>tests</code>目录包含两个目录：<code>Feature</code>和<code>Unit</code>。<strong>单元测试</strong>是关注代码中非常小的，孤立部分的测试。实际上，大多数单元测试可能只关注单一方法。<strong>功能测试</strong>可能会测试代码的大部分内容，包括几个对象如何相互交互，甚至是完整的HTTP请求到JSON端点。</p><div class="tip">PHPUnit是最早和最知名的PHP单元测试包之一。它主要是为单元测试而设计的，这意味着尽可能在最小的组件上测试代码，但它也非常灵活，可以用于单元测试。</div><h2 id="创建和运行测试"><a href="#创建和运行测试" class="headerlink" title="创建和运行测试"></a>创建和运行测试</h2><p>要创建一个新的测试用例，请使用Artisan命令：<code>make:test</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">// Create a test in the Feature directory...</div><div class="line">php artisan make:test UserTest</div><div class="line"></div><div class="line">// Create a test in the Unit directory...</div><div class="line">php artisan make:test UserTest --unit</div></pre></td></tr></table></figure></p><p>测试生成后，您可以像通常使用PHPUnit一样定义测试方法。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">&lt;?php</div><div class="line"></div><div class="line">namespace Tests\Feature;</div><div class="line"></div><div class="line">use Tests\TestCase;</div><div class="line"></div><div class="line">class UserTest extends TestCase</div><div class="line">&#123;</div><div class="line">    /**</div><div class="line">     * A basic test example.</div><div class="line">     */</div><div class="line">    public function testExample()</div><div class="line">    &#123;</div><div class="line">        //访问根路由时应该看到&apos;Laravel 5&apos;</div><div class="line">        $this-&gt;visit(&apos;/&apos;)</div><div class="line">            -&gt;see(&apos;Laravel 5&apos;);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>要运行测试，请从终端执行命令：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">phpunit</div></pre></td></tr></table></figure></p><p>运行成功的话应该会显示如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">PHPUnit 7.1.1 by Sebastian Bergmann and contributors.</div><div class="line"></div><div class="line">...</div><div class="line"></div><div class="line">Time: 103 ms, Memory: 12.75Mb</div><div class="line"></div><div class="line">OK (2 tests, 3 assertions)</div></pre></td></tr></table></figure></p><div class="tip">假如在运行<code>phpunit</code>命令之时不成功，发现是没有命令的话可以在系统中添加全局（环境）变量或目录<code>./vendor/bin</code>，也有可能会发生phpUnit版本过低测试不成功，请留意</div><h2 id="结言"><a href="#结言" class="headerlink" title="结言"></a>结言</h2><p>您应该注意到本教程中编写的测试中的一个共同主题：它们都非常简单。这是学习如何使用基本测试断言和帮助程序并尝试尽可能使用它们的好处之一。测试越简单，测试越容易理解和维护。<br>有兴趣的话您还可以在<a href="http://phpunit.readthedocs.io/zh_CN/latest/index.html" target="_blank" rel="external">PHPUnit 文档</a>中找到更多信息，就酱。<br> \(•ㅂ•)/♥  共勉~</p><h4 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h4><p><a href="https://laravel.com/docs/5.6/testing" target="_blank" rel="external">Laravel 测试入门</a><br><a href="http://phpunit.readthedocs.io/zh_CN/latest/index.html" target="_blank" rel="external">PHPUnit 文档</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;https://laravel.com/docs/5.6/testing&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Laravel&lt;/a&gt;建立在考虑测试的基础上，其中工程化的一大特点就是&lt;strong&gt;可测试性&lt;/strong&gt;。事实上，支持使用&lt;a href=&quot;http://phpunit.readthedocs.io/zh_CN/latest/index.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;PHPUnit&lt;/a&gt;进行测试的功能已经包含在内，并且已经为您的应用程序设置了一个文件。该框架还附带了方便的帮助程序方法，使您能够表达测试您的应用程序。
    
    </summary>
    
    
      <category term="laravel" scheme="https://areirei.github.io/tags/laravel/"/>
    
      <category term="test" scheme="https://areirei.github.io/tags/test/"/>
    
      <category term="testing" scheme="https://areirei.github.io/tags/testing/"/>
    
      <category term="phpunit" scheme="https://areirei.github.io/tags/phpunit/"/>
    
      <category term="php" scheme="https://areirei.github.io/tags/php/"/>
    
  </entry>
  
  <entry>
    <title>Linux安装mysql</title>
    <link href="https://areirei.github.io/2018/03/26/Linux-mysql-install/"/>
    <id>https://areirei.github.io/2018/03/26/Linux-mysql-install/</id>
    <published>2018-03-26T06:54:22.000Z</published>
    <updated>2018-05-05T07:21:26.551Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://www.mysql.com/" target="_blank" rel="external">Mysql</a>是最流行的关系型数据库管理系统，在WEB应用方面MySQL是最好的<strong>RDBMS</strong>（Relational Database Management System：关系数据库管理系统）应用软件之一。尝试了一下在Linux上安装，意外地简单~<a id="more"></a></p><h2 id="下载安装"><a href="#下载安装" class="headerlink" title="下载安装"></a>下载安装</h2><ol><li><p>下载前先看看<a href="http://rpm.org/" target="_blank" rel="external">RPM软件包管理器</a>里有没有安装过mysql</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">rmp -qa | grep mysql</div></pre></td></tr></table></figure></li><li><p>如果没有的话就可以开始安装mysql啦</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">yum install mysql</div><div class="line">yum install mysql-server</div><div class="line">yum install mysql-devel</div></pre></td></tr></table></figure></li><li><p>启动mysql</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">service mysqld start</div></pre></td></tr></table></figure></li><li><p>验证mysql正常</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">mysqladmin --version</div></pre></td></tr></table></figure></li><li><p>如果正常的话，会显示以下信息，相关系统信息会有所不同</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">mysqladmin  Ver 8.42 Distrib 5.6.39, for Linux on x86_64</div></pre></td></tr></table></figure></li></ol><div class="tip">如果在下载的时候提示没有可用包，可以试着下载mysql的repo源<code>wget http://repo.mysql.com/mysql-community-release-el7-5.noarch.rpm</code>，并安装<code>rpm -ivh mysql-community-release-el7-5.noarch.rpm</code>,成功后再尝试一次</div><h2 id="root用户"><a href="#root用户" class="headerlink" title="root用户"></a>root用户</h2><ol><li><p>首先，我们通过以下命令登录root到数据库</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">mysql -u root -p</div></pre></td></tr></table></figure></li><li><p>接着，我们看一下数据库</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">show databases;</div></pre></td></tr></table></figure></li><li><p>如果正常的话，将会显示成以下代码，其中mysql的内置数据库，存储了一些用户、权限、存储过程等数据。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">+--------------------+</div><div class="line">| Database           |</div><div class="line">+--------------------+</div><div class="line">| information_schema |</div><div class="line">| mysql              |</div><div class="line">| performance_schema |</div><div class="line">+--------------------+</div></pre></td></tr></table></figure></li><li><p>其次，我们再用sql语句查询一下所有的用户</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">select host,user from mysql.user</div></pre></td></tr></table></figure></li><li><p>如果正常的话，将会显示以下代码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">+-------------------+------+</div><div class="line">| host              | user |</div><div class="line">+-------------------+------+</div><div class="line">| 127.0.0.1         | root |</div><div class="line">| ::1               | root |</div><div class="line">| localhost         |      |</div><div class="line">| localhost         | root |</div><div class="line">+-------------------+------+</div></pre></td></tr></table></figure></li><li><p>最后，用sql语句修改（创建）密码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">update mysql.user set password=password(&apos;test&apos;) where user=&apos;root&apos;;</div><div class="line">flush privileges;</div></pre></td></tr></table></figure></li></ol><h2 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h2><p>我在使用过程中，由于php和mysql都安装在了本地，这时laravel连接数据库时要用套接字通讯，这时大家可以在laravel的数据库配置中设置<a href="https://en.wikipedia.org/wiki/Unix_domain_socket" target="_blank" rel="external">unix_socket</a>的办法来解决问题，其它的话Linux不同版本代码可能会有所不同，如出错网上有相关解决办法,就酱。<br> \(•ㅂ•)/♥  共勉~</p><h4 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h4><p><a href="http://www.runoob.com/mysql/mysql-install.html" target="_blank" rel="external">mysql安装</a><br><a href="https://www.cnblogs.com/yowamushi/p/8043054.html" target="_blank" rel="external">yum install mysql-server没有可用包</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;https://www.mysql.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Mysql&lt;/a&gt;是最流行的关系型数据库管理系统，在WEB应用方面MySQL是最好的&lt;strong&gt;RDBMS&lt;/strong&gt;（Relational Database Management System：关系数据库管理系统）应用软件之一。尝试了一下在Linux上安装，意外地简单~
    
    </summary>
    
    
      <category term="Linux" scheme="https://areirei.github.io/tags/Linux/"/>
    
      <category term="mysql" scheme="https://areirei.github.io/tags/mysql/"/>
    
  </entry>
  
  <entry>
    <title>Laravel+vue环境之项目内部署</title>
    <link href="https://areirei.github.io/2018/03/20/Laravel-vue-environment/"/>
    <id>https://areirei.github.io/2018/03/20/Laravel-vue-environment/</id>
    <published>2018-03-20T09:09:02.000Z</published>
    <updated>2018-05-05T07:21:30.111Z</updated>
    
    <content type="html"><![CDATA[<p>本教程介绍在Laravel中部署vue，在Laravel包含了一些基本脚手架，以便使用Vue库更容易开始编写现代JavaScript 。Vue为使用组件构建强大的JavaScript应用程序提供了富有表现力的API。我们可以使用Laravel Mix轻松地将JavaScript组件编译成一个可以浏览器的JavaScript文件。<a id="more"></a></p><h1 id="创建laravel"><a href="#创建laravel" class="headerlink" title="创建laravel"></a>创建laravel</h1><p>首先，你要有一个<a href="https://getcomposer.org/download/" target="_blank" rel="external">composer</a>,然后，你便有了一个<a href="https://laravel.com/docs/5.6" target="_blank" rel="external">laravel</a>。<br>运行命令<code>composer create-project --prefer-dist laravel/laravel blog</code>创建一个新的laravel项目（具体创建laravel请到官网学习）。</p><h1 id="Hello-world"><a href="#Hello-world" class="headerlink" title="Hello world!"></a>Hello world!</h1><ol><li><p>打开命令行，进入你的项目内<code>cd blog</code></p></li><li><p>在开始前，由于各种你懂得原因，npm作为国外的node仓库安装工具，操作的时候可能会发生速度慢等各种问题，一般推荐用taobao源进行加速,后面代码同样加上后缀即可，下载项目默认依赖，代码如下。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install  --registry=https://registry.npm.taobao.org</div></pre></td></tr></table></figure></li><li><p>下载vue路由管理，代码如下。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install vue-router --save-dev</div></pre></td></tr></table></figure></li><li><p>在<code>/resources/assets/js/components</code>中新建一个<code>HelloComponent.vue</code>自定义组件文件，代码如下。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">&lt;template&gt;</div><div class="line">    &lt;div&gt;</div><div class="line">        &lt;h1&gt;Hello World!&lt;/h1&gt;</div><div class="line">    &lt;/div&gt;</div><div class="line">&lt;/template&gt;</div><div class="line"></div><div class="line">&lt;script&gt;</div><div class="line">    export default&#123;</div><div class="line">        data()&#123;</div><div class="line">            return &#123;</div><div class="line"></div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&lt;/script&gt;</div></pre></td></tr></table></figure></li><li><p>在<code>/resources/assets/js</code>下新建文件夹<code>router</code>,并在里面新建<code>hello.js</code>,并通过嵌套路由配置将<code>hello</code>路由映射到刚刚新创建的<code>HellowComponent</code>组件当中，代码如下。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">import Vue from &apos;vue&apos;</div><div class="line">import VueRouter from &apos;vue-router&apos;</div><div class="line">Vue.use(VueRouter)</div><div class="line"></div><div class="line">export default new VueRouter(&#123;</div><div class="line">    saveScrollPosition: true,</div><div class="line">    routes: [</div><div class="line">        &#123;</div><div class="line">            name: &quot;hello&quot;,</div><div class="line">            path: &apos;/&apos;,</div><div class="line">            component: resolve =&gt;void(require([&apos;../components/HelloComponent.vue&apos;], resolve))</div><div class="line">        &#125;,</div><div class="line">    ]</div><div class="line">&#125;)</div></pre></td></tr></table></figure></li><li><p>在当前laravel项目中<code>/resources/assets/js</code>下新建<code>hello.vue</code>,做为主界面，嵌套路由视图，代码如下。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">&lt;template&gt;</div><div class="line">    &lt;div&gt;</div><div class="line">        &lt;h1&gt;Hello&lt;/h1&gt;</div><div class="line">        &lt;router-view&gt;&lt;/router-view&gt;</div><div class="line">    &lt;/div&gt;</div><div class="line">&lt;/template&gt;</div><div class="line"></div><div class="line">&lt;script&gt;</div><div class="line">    export default&#123;</div><div class="line">        data()&#123;</div><div class="line">            return &#123;</div><div class="line"></div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&lt;/script&gt;</div></pre></td></tr></table></figure></li><li><p>接着在<code>/resources/assets/js</code>下新建<code>hello.js</code>，代码如下。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">require(&apos;./bootstrap&apos;);</div><div class="line"></div><div class="line">window.Vue = require(&apos;vue&apos;);</div><div class="line"></div><div class="line">import Vue from &apos;vue&apos;</div><div class="line">import App from &apos;./hello.vue&apos;</div><div class="line">import router from &apos;./router/hello.js&apos;</div><div class="line">const app = new Vue(&#123;</div><div class="line">    el: &apos;#app&apos;,</div><div class="line">    router,</div><div class="line">    render: h=&gt;h(App)</div><div class="line">&#125;);</div></pre></td></tr></table></figure></li><li><p>在<code>/resources/views</code>下新建<code>hello.blade.php</code>，代码如下。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">&lt;!DOCTYPE html&gt;</div><div class="line">&lt;html&gt;</div><div class="line">&lt;head&gt;</div><div class="line">    &lt;meta charset=&quot;utf-8&quot;&gt;</div><div class="line">    &lt;meta name=&quot;csrf-token&quot; content=&quot;&#123;&#123; csrf_token() &#125;&#125;&quot;&gt;</div><div class="line">    &lt;title&gt;Hello&lt;/title&gt;</div><div class="line">&lt;/head&gt;</div><div class="line">&lt;body&gt;</div><div class="line">    &lt;div id=&quot;app&quot;&gt;&lt;/div&gt;</div><div class="line">    &lt;script src=&quot;&#123;&#123; mix(&apos;js/manifest.js&apos;) &#125;&#125;&quot;&gt;&lt;/script&gt;</div><div class="line">    &lt;script src=&quot;&#123;&#123; mix(&apos;js/vendor.js&apos;) &#125;&#125;&quot;&gt;&lt;/script&gt;</div><div class="line">    &lt;script src=&quot;&#123;&#123; mix(&apos;js/hello.js&apos;) &#125;&#125;&quot;&gt;&lt;/script&gt;</div><div class="line">&lt;/body&gt;</div><div class="line">&lt;/html&gt;</div></pre></td></tr></table></figure></li><li><p>在<code>/resources/routes/web.php</code>中新增路由，代码如下。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Route::view(&apos;/hello&apos;,&apos;/hello&apos;);</div></pre></td></tr></table></figure></li><li><p>修改<code>webpack.mix.js</code>，代码如下。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">mix.js(&apos;resources/assets/js/app.js&apos;, &apos;public/js&apos;)</div><div class="line">   .js(&apos;resources/assets/js/hello.js&apos;, &apos;public/js&apos;)</div><div class="line">   .extract([&apos;vue&apos;, &quot;vue-router&quot;, &quot;axios&quot;])</div><div class="line">   .sass(&apos;resources/assets/sass/app.scss&apos;, &apos;public/css&apos;);</div></pre></td></tr></table></figure></li><li><p>保存后在命令行中本项目目录下执行<code>npm run watch</code>,进行重新编译</p></li><li><p>可以在命令行中本项目目录下输入<code>php artisan serve</code>,访问<code>http://127.0.0.1:8000/hello</code>即可看到效果</p></li></ol><div class="tip">laravel5.5起新增了<code>Route::view</code>和<code>Route::redirect</code>方法，5.4及以下的路由可以写成这样<code>Route::get(&#39;/hello&#39;, function () {return view(&#39;hello&#39;);});</code></div><h1 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h1><p>有时候运行npm时会提示<code>Write EIO</code>错误，可能是因为编码的问题造成，这种时候可用管理员身份运行命令行文件，或者运行<code>chcp 850</code>设置活动代码页编号，介绍在laravel中部署vue的教程基本结束，如果您有兴趣了解更多关于编写Vue组件的信息,你可以阅读<a href="https://vuejs.org/v2/guide/" target="_blank" rel="external">Vue文档</a>,就酱。<br> (•ㅂ•)/♥  共勉~</p><p>#参考链接<br><a href="https://laravel.com/docs/5.6" target="_blank" rel="external">Laravel 官方文档</a><br><a href="https://areirei.github.io/2018/03/20/Laravel-vue-environment/">原文链接</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本教程介绍在Laravel中部署vue，在Laravel包含了一些基本脚手架，以便使用Vue库更容易开始编写现代JavaScript 。Vue为使用组件构建强大的JavaScript应用程序提供了富有表现力的API。我们可以使用Laravel Mix轻松地将JavaScript组件编译成一个可以浏览器的JavaScript文件。
    
    </summary>
    
    
      <category term="laravel" scheme="https://areirei.github.io/tags/laravel/"/>
    
      <category term="vue" scheme="https://areirei.github.io/tags/vue/"/>
    
      <category term="environment" scheme="https://areirei.github.io/tags/environment/"/>
    
      <category term="construction" scheme="https://areirei.github.io/tags/construction/"/>
    
  </entry>
  
  <entry>
    <title>laravel-中间件过虑权限</title>
    <link href="https://areirei.github.io/2018/01/02/Laravel-role-middleware/"/>
    <id>https://areirei.github.io/2018/01/02/Laravel-role-middleware/</id>
    <published>2018-01-02T09:36:44.000Z</published>
    <updated>2018-05-05T07:21:31.877Z</updated>
    
    <content type="html"><![CDATA[<p>laravel有很多非常棒的权限管理包，平时都是用权限包的方法过虑权限，但在项目中，我发现用中间件的方法来过虑权限也很不错，也能解藕，今天用的是基于角色的权限管理<a href="https://github.com/Zizaco/entrust" target="_blank" rel="external">Entrust</a>,关于相关的使用就不过多阐述了，其它还有类似<a href="https://github.com/spatie/laravel-permission" target="_blank" rel="external">Laravel-permission</a>,<a href="https://github.com/JosephSilber/bouncer" target="_blank" rel="external">bouncer</a>等等都非常不错！<a id="more"></a></p><h2 id="laravel-权限过虑"><a href="#laravel-权限过虑" class="headerlink" title="laravel 权限过虑"></a>laravel 权限过虑</h2><p>其实官方已经有现成的方式进行权限过虑，现在只是提供另一个方式实现权限过虑，laravel的请求在进入逻辑处理之前会通过http中间件进行处理，而我们在原有的基础上，新增一个中间件handle住这个事件</p><ol><li>新建中间件<br><img src="https://raw.githubusercontent.com/areirei/fileStore/master/pic/power_path.png" alt="middleware_path"></li><li>修改内容<br><img src="https://raw.githubusercontent.com/areirei/fileStore/master/pic/power_file.png" alt="middleware_code"></li><li><p>同时在<code>App\Http\Kernel.php</code>中加入门面</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&apos;power&apos; =&gt; \App\Http\Middleware\Power::class,</div></pre></td></tr></table></figure></li><li><p>在路由中过虑<br>其中<code>uses</code>是注册路由时的参数，自动生成映射到控制器方法的uri,我们添加一个<code>permission</code>参数（参数名任意，中间件那里修改即可），用于路由过虑</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">Route::group([&apos;middleware&apos; =&gt; [&apos;auth&apos;,&apos;power&apos;]], function () &#123;</div><div class="line">    Route::get(&apos;/user/list&apos;,[&apos;uses&apos;=&gt;&apos;UserController@userLists&apos;,&apos;permission&apos;=&gt;&apos;user-list&apos;]);</div><div class="line">    //something...</div><div class="line">&#125;);</div></pre></td></tr></table></figure></li></ol><div class="tip"><br>原本的权限管理就有很多非常好的方法供调用，此文只是提供另一个思路做权限管理，希望能抛砖引玉，共勉<br></div>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;laravel有很多非常棒的权限管理包，平时都是用权限包的方法过虑权限，但在项目中，我发现用中间件的方法来过虑权限也很不错，也能解藕，今天用的是基于角色的权限管理&lt;a href=&quot;https://github.com/Zizaco/entrust&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Entrust&lt;/a&gt;,关于相关的使用就不过多阐述了，其它还有类似&lt;a href=&quot;https://github.com/spatie/laravel-permission&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Laravel-permission&lt;/a&gt;,&lt;a href=&quot;https://github.com/JosephSilber/bouncer&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;bouncer&lt;/a&gt;等等都非常不错！
    
    </summary>
    
    
      <category term="laravel" scheme="https://areirei.github.io/tags/laravel/"/>
    
      <category term="role" scheme="https://areirei.github.io/tags/role/"/>
    
      <category term="middleware" scheme="https://areirei.github.io/tags/middleware/"/>
    
  </entry>
  
  <entry>
    <title>laravel大型架构的MVC分层</title>
    <link href="https://areirei.github.io/2017/12/24/Laravel-mvc-pattern/"/>
    <id>https://areirei.github.io/2017/12/24/Laravel-mvc-pattern/</id>
    <published>2017-12-24T02:37:30.000Z</published>
    <updated>2018-05-05T07:20:27.696Z</updated>
    
    <content type="html"><![CDATA[<p>小型架构的MVC分层</p><ul><li>Model 数据层</li><li>View 视图层</li><li>Controller 控制层<a id="more"></a></li></ul><p>原本将这些逻辑处理都放在了Model层，随着项目的不断发展，数据逻辑和业务逻辑越发复杂，有时会将第三方信息发送获取，Redis数据存储，不同model的调度都写在了同一个Model上，导致model在原本数据访问的基础上，承担了更多的责任，编写维护都不再优雅高效。</p><h2 id="大型架构的MVC分层"><a href="#大型架构的MVC分层" class="headerlink" title="大型架构的MVC分层"></a>大型架构的MVC分层</h2><p><img src="https://raw.githubusercontent.com/areirei/fileStore/master/pic/mvc_big.png" alt="MVC分层"></p><ol><li>Model      : 数据映射层</li><li>Repository : 将Model获取的数据封装成对像的集合并提供操作</li><li>Service    : 封装业务逻辑</li><li>Controller ：接收请求并调用Service</li><li>View       : HTML页面</li></ol><p>Service调用Repository来获取数据，相互协调</p><ol><li>通过Repository将数据操作和数据访问从Model中分离</li><li>通过Services处理复杂的业务逻辑</li><li>Controller可调度不同的Service</li></ol><p><img src="https://raw.githubusercontent.com/areirei/fileStore/master/pic/file_interface.png" alt="MVC分层"></p><h3 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h3><p>当你开始接受这种设定，会感觉到laravel式的优雅编程和其它优点</p><ol><li>数据访问逻辑集中处理（易于维护）</li><li>业务和数据逻辑的完全分离（易于调试）</li><li>减少重复代码</li><li>降低程序出错的机率</li><li>将来切近到其它的ORM也很容易（解耦对数据源的依赖）</li></ol><h3 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h3><p><a href="http://oomusou.io/laravel/laravel-architecture/" target="_blank" rel="external">Laravel 的中大型專案架構</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;小型架构的MVC分层&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Model 数据层&lt;/li&gt;
&lt;li&gt;View 视图层&lt;/li&gt;
&lt;li&gt;Controller 控制层
    
    </summary>
    
    
      <category term="laravel" scheme="https://areirei.github.io/tags/laravel/"/>
    
      <category term="mvc" scheme="https://areirei.github.io/tags/mvc/"/>
    
  </entry>
  
  <entry>
    <title>Laravel 小型架构的Model分层</title>
    <link href="https://areirei.github.io/2017/12/14/Laravel-eloquent-query-scope/"/>
    <id>https://areirei.github.io/2017/12/14/Laravel-eloquent-query-scope/</id>
    <published>2017-12-14T05:58:45.000Z</published>
    <updated>2018-05-05T07:20:09.441Z</updated>
    
    <content type="html"><![CDATA[<p>在刚开始使用laravel的过程中，我们需要将代码分层</p><ul><li>Model 数据层</li><li>View 视图层</li><li>Controller 控制层<a id="more"></a>在这个基础上我们在用控制层获取数据的时候，就可以用上Laravel的Eloquent中的本地作用域，将数据处理和业务逻辑都集中在Model层，让控制层只做调度的功能;</li></ul><h2 id="Eloquent-Query-Scopes"><a href="#Eloquent-Query-Scopes" class="headerlink" title="Eloquent Query Scopes"></a>Eloquent Query Scopes</h2><p>首先在模型文件中新增一个方法<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">&lt;?php</div><div class="line"></div><div class="line">namespace App;</div><div class="line"></div><div class="line">use Illuminate\Database\Eloquent\Model;</div><div class="line"></div><div class="line">class User extends Model</div><div class="line">&#123;</div><div class="line">    /**</div><div class="line">     * Scope a query to only include popular users.</div><div class="line">     *</div><div class="line">     * @param \Illuminate\Database\Eloquent\Builder $query</div><div class="line">     * @return \Illuminate\Database\Eloquent\Builder</div><div class="line">     */</div><div class="line">    public function scopePopular($query)</div><div class="line">    &#123;</div><div class="line">        return $query-&gt;where(&apos;votes&apos;, &apos;&gt;&apos;, 100);</div><div class="line">    &#125;</div></pre></td></tr></table></figure></p><div class="tip"><br>    创建方法时名称前面一写要有<strong>scope</strong>，使用方法的时候就不用加上prefix了。<br></div><br>然后在控制器文件中这样使用<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$users = App\User::popular()-&gt;active()-&gt;orderBy(&apos;created_at&apos;)-&gt;get();</div></pre></td></tr></table></figure><br><br>这样，在获取数据的时候你就可以同时进行其它处理<br>当然，你也可以这样使用<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">public function scopePopular($query,$data)</div><div class="line">   &#123;</div><div class="line">       if(isset($data[&apos;id&apos;])&#123;</div><div class="line">           return $query-&gt;where(&apos;id&apos;,$data[&apos;id&apos;])-&gt;update($data);</div><div class="line">       &#125;else&#123;</div><div class="line">           return $query-&gt;create($data);</div><div class="line">       &#125;</div><div class="line">   &#125;</div></pre></td></tr></table></figure><br><br>通过传进来的第二个参数，进行其它业务或数据的处理，controller又可以重复使用方法，控制层也能只做基本控制。<br><div class="tip"><br>    创建方法时的第一个参数必须是builder，其它参数则紧接其后添加即可。<br></div><p>More info: <a href="https://laravel.com/docs/5.5/eloquent#query-scopes" target="_blank" rel="external">query-scopes</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在刚开始使用laravel的过程中，我们需要将代码分层&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Model 数据层&lt;/li&gt;
&lt;li&gt;View 视图层&lt;/li&gt;
&lt;li&gt;Controller 控制层
    
    </summary>
    
    
      <category term="laravel" scheme="https://areirei.github.io/tags/laravel/"/>
    
      <category term="Eloquent" scheme="https://areirei.github.io/tags/Eloquent/"/>
    
  </entry>
  
  <entry>
    <title>Laravel-定制500错误页</title>
    <link href="https://areirei.github.io/2017/09/11/Laravel-custom-error-pages/"/>
    <id>https://areirei.github.io/2017/09/11/Laravel-custom-error-pages/</id>
    <published>2017-09-11T13:54:50.000Z</published>
    <updated>2018-05-05T07:20:14.784Z</updated>
    
    <content type="html"><![CDATA[<p>laravel中想要定义一个错误页面和调用错误页面很简单,在<code>resources/views/errors</code>文件夹中写入<code>404.blade.php</code>(请求错误代码+‘blade.php’)文件即可,因为在Laravel 5 中，所有异常处理都集中处理了，这是HTTP 异常的默认行为。<a id="more"></a></p><h2 id="500错误"><a href="#500错误" class="headerlink" title="500错误"></a>500错误</h2><p>唯独500错误，或者说其它不属于于正常请求错误代码类型的错误（例如代码错误）使用<code>resources/views/errors/500.blade.php</code>无效，在使用<code>$e-&gt;getStatusCode()</code>后依旧无法正常获取HTTP异常的解决办法就是在默认的异常处理中<code>app/Exceptions/Handler.php</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"> * 默认的异常处理方法</div><div class="line"> *</div><div class="line"> * @param  \Illuminate\Http\Request  $request</div><div class="line"> * @param  \Exception  $e</div><div class="line"> * @return \Illuminate\Http\Response</div><div class="line"> */</div><div class="line">public function render($request, Exception $e)</div><div class="line">&#123;</div><div class="line">    if (!$this-&gt;isHttpException($e)) $e = new \Symfony\Component\HttpKernel\Exception\HttpException(500);</div><div class="line">    return parent::render($request, $e);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p><div class="tip"><br>    ps:记得debug模式改成false<br></div><br>希望这个方法对你也有用，就酱 (๑•̀ㅂ•́)و✧</p><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><p><a href="https://laravel.com/docs/5.4/errors#render-method" target="_blank" rel="external">Laravel Errors &amp; Logging</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;laravel中想要定义一个错误页面和调用错误页面很简单,在&lt;code&gt;resources/views/errors&lt;/code&gt;文件夹中写入&lt;code&gt;404.blade.php&lt;/code&gt;(请求错误代码+‘blade.php’)文件即可,因为在Laravel 5 中，所有异常处理都集中处理了，这是HTTP 异常的默认行为。
    
    </summary>
    
    
      <category term="laravel" scheme="https://areirei.github.io/tags/laravel/"/>
    
      <category term="errors" scheme="https://areirei.github.io/tags/errors/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="https://areirei.github.io/2017/09/10/hello-world/"/>
    <id>https://areirei.github.io/2017/09/10/hello-world/</id>
    <published>2017-09-10T13:54:50.000Z</published>
    <updated>2018-03-23T07:26:15.792Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="external">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="external">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="external">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="external">GitHub</a>.</p><a id="more"></a><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo new <span class="string">"My New Post"</span></div></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="external">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo server</div></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="external">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo generate</div></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="external">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo deploy</div></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="external">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;documentation&lt;/a&gt; for more info. If you get any problems when using Hexo, you can find the answer in &lt;a href=&quot;https://hexo.io/docs/troubleshooting.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;troubleshooting&lt;/a&gt; or you can ask me on &lt;a href=&quot;https://github.com/hexojs/hexo/issues&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;GitHub&lt;/a&gt;.&lt;/p&gt;
    
    </summary>
    
    
      <category term="hexo" scheme="https://areirei.github.io/tags/hexo/"/>
    
  </entry>
  
</feed>
