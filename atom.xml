<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>FullStackMan</title>
  
  <subtitle>Design and building a team or a company which builds great products.</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://areirei.github.io/"/>
  <updated>2017-12-14T06:50:52.038Z</updated>
  <id>https://areirei.github.io/</id>
  
  <author>
    <name>FullStackMan</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Laravel-Eloquent-query-scope</title>
    <link href="https://areirei.github.io/2017/12/14/Laravel-eloquent-query-scope/"/>
    <id>https://areirei.github.io/2017/12/14/Laravel-eloquent-query-scope/</id>
    <published>2017-12-14T05:58:45.000Z</published>
    <updated>2017-12-14T06:50:52.038Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Laravel-小型架构的MVC分层"><a href="#Laravel-小型架构的MVC分层" class="headerlink" title="Laravel 小型架构的MVC分层"></a>Laravel 小型架构的MVC分层</h1><p>在刚开始使用laravel的过程中，我们需要将代码分层</p><ul><li>Model 数据层</li><li>View 视图层</li><li>Controller 控制层</li></ul><p>在这个基础上我们在用控制层获取数据的时候，就可以用上Laravel的Eloquent中的本地作用域，将数据处理和业务逻辑都集中在Model层，让控制层只做调度的功能;<br><a id="more"></a></p><h1 id="Eloquent-Query-Scopes"><a href="#Eloquent-Query-Scopes" class="headerlink" title="Eloquent Query Scopes"></a>Eloquent Query Scopes</h1><p>首先在模型文件中新增一个方法<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">&lt;?php</div><div class="line"></div><div class="line">namespace App;</div><div class="line"></div><div class="line">use Illuminate\Database\Eloquent\Model;</div><div class="line"></div><div class="line">class User extends Model</div><div class="line">&#123;</div><div class="line">    /**</div><div class="line">     * Scope a query to only include popular users.</div><div class="line">     *</div><div class="line">     * @param \Illuminate\Database\Eloquent\Builder $query</div><div class="line">     * @return \Illuminate\Database\Eloquent\Builder</div><div class="line">     */</div><div class="line">    public function scopePopular($query)</div><div class="line">    &#123;</div><div class="line">        return $query-&gt;where(&apos;votes&apos;, &apos;&gt;&apos;, 100);</div><div class="line">    &#125;</div></pre></td></tr></table></figure></p><p>然后在控制器文件中这样使用<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">这样，在获取数据的时候你就可以同时进行其它处理</div><div class="line">当然，你也可以这样使用</div></pre></td></tr></table></figure></p><p> public function scopePopular($query,$data)<br>    {<br>        if(isset($data[‘id’]){<br>            return $query-&gt;where(‘id’,$data[‘id’])-&gt;update($data);<br>        }else{<br>            return $query-&gt;create($data);<br>        }<br>    }<br>```<br>通过传进来的第二个参数，进行其它业务或数据的处理，controller又可以重复使用方法，控制层也不到于太混乱。</p><div class="tip"><br>    创建方法时名称前面一写要有<strong>scope</strong>，使用方法的时候就不用加上prefix了。<br></div><br><div class="tip"><br>    创建方法时的第一个参数必须是builder，其它参数则紧接其后添加即可。<br></div><p>More info: <a href="https://laravel.com/docs/5.5/eloquent#query-scopes" target="_blank" rel="external">query-scopes</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Laravel-小型架构的MVC分层&quot;&gt;&lt;a href=&quot;#Laravel-小型架构的MVC分层&quot; class=&quot;headerlink&quot; title=&quot;Laravel 小型架构的MVC分层&quot;&gt;&lt;/a&gt;Laravel 小型架构的MVC分层&lt;/h1&gt;&lt;p&gt;在刚开始使用laravel的过程中，我们需要将代码分层&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Model 数据层&lt;/li&gt;
&lt;li&gt;View 视图层&lt;/li&gt;
&lt;li&gt;Controller 控制层&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;在这个基础上我们在用控制层获取数据的时候，就可以用上Laravel的Eloquent中的本地作用域，将数据处理和业务逻辑都集中在Model层，让控制层只做调度的功能;&lt;br&gt;
    
    </summary>
    
    
      <category term="laravel,Eloquent" scheme="https://areirei.github.io/tags/laravel-Eloquent/"/>
    
  </entry>
  
  <entry>
    <title>Laravel-custom-error-pages</title>
    <link href="https://areirei.github.io/2017/09/11/Laravel-custom-error-pages/"/>
    <id>https://areirei.github.io/2017/09/11/Laravel-custom-error-pages/</id>
    <published>2017-09-11T13:54:50.000Z</published>
    <updated>2017-12-14T06:44:04.312Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Laravel-定制500错误页"><a href="#Laravel-定制500错误页" class="headerlink" title="Laravel - 定制500错误页"></a>Laravel - 定制500错误页</h1><p>laravel中想要定义一个错误页面和调用错误页面很简单,在<code>resources/views/errors</code>文件夹中写入<code>404.blade.php</code>(请求错误代码+‘blade.php’)文件即可,因为在Laravel 5 中，所有异常处理都集中处理了，这是HTTP 异常的默认行为。<a id="more"></a></p><h2 id="500错误"><a href="#500错误" class="headerlink" title="500错误"></a>500错误</h2><p>唯独500错误，或者说其它不属于于正常请求错误代码类型的错误（例如代码错误）使用<code>resources/views/errors/500.blade.php</code>无效，在使用<code>$e-&gt;getStatusCode()</code>后依旧无法正常获取HTTP异常的解决办法就是在默认的异常处理中<code>app/Exceptions/Handler.php</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"> * 默认的异常处理方法</div><div class="line"> *</div><div class="line"> * @param  \Illuminate\Http\Request  $request</div><div class="line"> * @param  \Exception  $e</div><div class="line"> * @return \Illuminate\Http\Response</div><div class="line"> */</div><div class="line">public function render($request, Exception $e)</div><div class="line">&#123;</div><div class="line">    if (!$this-&gt;isHttpException($e)) $e = new \Symfony\Component\HttpKernel\Exception\HttpException(500);</div><div class="line">    return parent::render($request, $e);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p><div class="tip"><br>    ps:记得debug模式改成false<br></div><br>希望这个方法对你也有用，就酱 (๑•̀ㅂ•́)و✧</p><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><p><a href="https://laravel.com/docs/5.4/errors#render-method" target="_blank" rel="external">Laravel Errors &amp; Logging</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Laravel-定制500错误页&quot;&gt;&lt;a href=&quot;#Laravel-定制500错误页&quot; class=&quot;headerlink&quot; title=&quot;Laravel - 定制500错误页&quot;&gt;&lt;/a&gt;Laravel - 定制500错误页&lt;/h1&gt;&lt;p&gt;laravel中想要定义一个错误页面和调用错误页面很简单,在&lt;code&gt;resources/views/errors&lt;/code&gt;文件夹中写入&lt;code&gt;404.blade.php&lt;/code&gt;(请求错误代码+‘blade.php’)文件即可,因为在Laravel 5 中，所有异常处理都集中处理了，这是HTTP 异常的默认行为。
    
    </summary>
    
    
      <category term="laravel,errors" scheme="https://areirei.github.io/tags/laravel-errors/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="https://areirei.github.io/2017/09/10/hello-world/"/>
    <id>https://areirei.github.io/2017/09/10/hello-world/</id>
    <published>2017-09-10T13:54:50.000Z</published>
    <updated>2017-12-14T05:50:57.921Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="external">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="external">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="external">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="external">GitHub</a>.</p><a id="more"></a><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo new <span class="string">"My New Post"</span></div></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="external">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo server</div></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="external">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo generate</div></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="external">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo deploy</div></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="external">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;documentation&lt;/a&gt; for more info. If you get any problems when using Hexo, you can find the answer in &lt;a href=&quot;https://hexo.io/docs/troubleshooting.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;troubleshooting&lt;/a&gt; or you can ask me on &lt;a href=&quot;https://github.com/hexojs/hexo/issues&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;GitHub&lt;/a&gt;.&lt;/p&gt;
    
    </summary>
    
    
      <category term="hexo" scheme="https://areirei.github.io/tags/hexo/"/>
    
  </entry>
  
</feed>
